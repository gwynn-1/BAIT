<?php

namespace App\Http\Controllers\Admin;

use Backpack\CRUD\app\Http\Controllers\CrudController;

// VALIDATION: change the requests to match your own file names if you need form validation
use App\Http\Requests\Borrow_detailRequest as StoreRequest;
use App\Http\Requests\Borrow_detailRequest as UpdateRequest;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use App\API\excelSpout;

class Borrow_detailCrudController extends CrudController
{

    public function index()
    {
        $expire_rec = DB::table("borrow_detail")->select("id")->whereDate("expire_date","<",Carbon::now())->get();
        $unreturn_rec = DB::table("borrow_detail")
                    ->select("id")
                    ->whereDate("return_date","<",Carbon::now())
                    ->where("is_return","0")
                    ->where("is_keep","0")->get();
        if($expire_rec !=null)
            $this->data['expire_rec']=$expire_rec;
        if($unreturn_rec!=null)
            $this->data['unreturn_rec']= $unreturn_rec;
        return parent::index(); // TODO: Change the autogenerated stub
    }

    public function setup()
    {

        /*
        |--------------------------------------------------------------------------
        | BASIC CRUD INFORMATION
        |--------------------------------------------------------------------------
        */
        $this->crud->setModel('App\Models\Borrow_detail');
        $this->crud->setRoute(config('backpack.base.route_prefix') . '/borrow_detail');
        $this->crud->setEntityNameStrings('borrow_detail', 'borrow_details');

        /*
        |--------------------------------------------------------------------------
        | BASIC CRUD INFORMATION
        |--------------------------------------------------------------------------
        */

//        $this->crud->setFromDb();
        $this->crud->setListView("backpack::crud.list-bait");
        $this->crud->setEditView("backpack::crud.edit-bait");

        // ------ CRUD FIELDS
         $this->crud->addField(
             ['name'  => 'id', // DB column name (will also be the name of the input)
             'label' => 'ID', // the human-readable label for the input
             'type'  => 'text'], 'update');
         $this->crud->addFields([
             ['name'  => 'id_reader', // DB column name (will also be the name of the input)
                 'label' => 'Độc giả', // the human-readable label for the input
                 'type'  => 'select2',
                 'entity'=>'readers',
                 'attribute'=>'name',
                 'model'=>'App\Models\Reader'],
             ['name'  => 'id_book', // DB column name (will also be the name of the input)
                 'label' => 'Sách', // the human-readable label for the input
                 'type'  => 'select2',
                 'entity'=>'books',
                 'attribute'=>'name',
                 'model'=>'App\Models\Book'],
             ['name'  => 'borrow_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày mượn',
                 'type'=>'datetime_picker'],
             ['name'  => 'return_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày trả', // the human-readable label for the input
                 'type'  => 'datetime_picker'],
             ['name'  => 'is_return', // DB column name (will also be the name of the input)
                 'label' => 'Đã trả', // the human-readable label for the input
                 'type'        => 'radio',
                 'options'     => [ // the key will be stored in the db, the value will be shown as label;
                     0 => "0",
                     1 => "1",
                     2 =>"null"]
                 ],
             ['name'  => 'is_keep', // DB column name (will also be the name of the input)
                 'label' => 'CLB đang giữ sách', // the human-readable label for the input
                 'type'        => 'radio',
                 'options'     => [ // the key will be stored in the db, the value will be shown as label;
                     0 => "0",
                     1 => "1"]
             ],
             ['name'  => 'expire_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày hết hạn', // the human-readable label for the input
                 'type'  => 'datetime_picker'],
         ], 'update/create/both');
        // $this->crud->removeField('name', 'update/create/both');
        // $this->crud->removeFields($array_of_names, 'update/create/both');

        // ------ CRUD COLUMNS
        // $this->crud->addColumn(); // add a single column, at the end of the stack
         $this->crud->addColumns([
             ['name'  => 'id', // DB column name (will also be the name of the input)
                 'label' => 'ID', // the human-readable label for the input
                 'type'  => 'text'],
             ['name'  => 'id_reader', // DB column name (will also be the name of the input)
                 'label' => 'Độc giả', // the human-readable label for the input
                 'type'  => 'select',
                 'entity'=>'reader',
                 'attribute'=>'name',
                 'model'=>'App\Models\Reader'],
             ['name'  => 'id_book', // DB column name (will also be the name of the input)
                 'label' => 'Sách', // the human-readable label for the input
                 'type'  => 'select',
                 'entity'=>'book',
                 'attribute'=>'name',
                 'model'=>'App\Models\Book'],
             ['name'  => 'borrow_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày mượn',
                 'type'=>'datetime'],
             ['name'  => 'return_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày trả', // the human-readable label for the input
                 'type'  => 'datetime'],
             ['name'  => 'is_return', // DB column name (will also be the name of the input)
                 'label' => 'Đã trả', // the human-readable label for the input
                 'type'        => 'radio',
                 'options'     => [ // the key will be stored in the db, the value will be shown as label;
                     0 => "chưa",
                     1 => "rồi",
                     2 =>"null"]
             ],
             ['name'  => 'is_keep', // DB column name (will also be the name of the input)
                 'label' => 'CLB đang giữ sách', // the human-readable label for the input
                 'type'        => 'radio',
                 'options'     => [ // the key will be stored in the db, the value will be shown as label;
                     0 => "sai",
                     1 => "đúng"]
             ],
             ['name'  => 'expire_date', // DB column name (will also be the name of the input)
                 'label' => 'Ngày hết hạn', // the human-readable label for the input
                 'type'  => 'datetime'],
             ['name'  => 'created_at', // DB column name (will also be the name of the input)
                 'label' => 'Created At', // the human-readable label for the input
                 'type'  => 'datetime'],
             ['name'  => 'updated_at', // DB column name (will also be the name of the input)
                 'label' => 'Updated At', // the human-readable label for the input
                 'type'  => 'datetime']
         ]); // add multiple columns, at the end of the stack
        // $this->crud->removeColumn('column_name'); // remove a column from the stack
        // $this->crud->removeColumns(['column_name_1', 'column_name_2']); // remove an array of columns from the stack
        // $this->crud->setColumnDetails('column_name', ['attribute' => 'value']); // adjusts the properties of the passed in column (by name)
        // $this->crud->setColumnsDetails(['column_1', 'column_2'], ['attribute' => 'value']);

        // ------ CRUD BUTTONS
        // possible positions: 'beginning' and 'end'; defaults to 'beginning' for the 'line' stack, 'end' for the others;
        // $this->crud->addButton($stack, $name, $type, $content, $position); // add a button; possible types are: view, model_function
        // $this->crud->addButtonFromModelFunction($stack, $name, $model_function_name, $position); // add a button whose HTML is returned by a method in the CRUD model
        // $this->crud->addButtonFromView($stack, $name, $view, $position); // add a button whose HTML is in a view placed at resources\views\vendor\backpack\crud\buttons
        // $this->crud->removeButton($name);
        // $this->crud->removeButtonFromStack($name, $stack);
        // $this->crud->removeAllButtons();
        // $this->crud->removeAllButtonsFromStack('line');

        // ------ CRUD ACCESS
        // $this->crud->allowAccess(['list', 'create', 'update', 'reorder', 'delete']);
        // $this->crud->denyAccess(['list', 'create', 'update', 'reorder', 'delete']);

        // ------ CRUD REORDER
        // $this->crud->enableReorder('label_name', MAX_TREE_LEVEL);
        // NOTE: you also need to do allow access to the right users: $this->crud->allowAccess('reorder');

        // ------ CRUD DETAILS ROW
        // $this->crud->enableDetailsRow();
        // NOTE: you also need to do allow access to the right users: $this->crud->allowAccess('details_row');
        // NOTE: you also need to do overwrite the showDetailsRow($id) method in your EntityCrudController to show whatever you'd like in the details row OR overwrite the views/backpack/crud/details_row.blade.php

        // ------ REVISIONS
        // You also need to use \Venturecraft\Revisionable\RevisionableTrait;
        // Please check out: https://laravel-backpack.readme.io/docs/crud#revisions
        // $this->crud->allowAccess('revisions');

        // ------ AJAX TABLE VIEW
        // Please note the drawbacks of this though:
        // - 1-n and n-n columns are not searchable
        // - date and datetime columns won't be sortable anymore
        // $this->crud->enableAjaxTable();

        // ------ DATATABLE EXPORT BUTTONS
        // Show export to PDF, CSV, XLS and Print buttons on the table view.
        // Does not work well with AJAX datatables.
        // $this->crud->enableExportButtons();

        // ------ ADVANCED QUERIES
        // $this->crud->addClause('active');
        // $this->crud->addClause('type', 'car');
        // $this->crud->addClause('where', 'name', '==', 'car');
        // $this->crud->addClause('whereName', 'car');
        // $this->crud->addClause('whereHas', 'posts', function($query) {
        //     $query->activePosts();
        // });
        // $this->crud->addClause('withoutGlobalScopes');
        // $this->crud->addClause('withoutGlobalScope', VisibleScope::class);
        // $this->crud->with(); // eager load relationships
        // $this->crud->orderBy();
        // $this->crud->groupBy();
        // $this->crud->limit();
    }

    public function ExportExcelAction()
    {
        $query = DB::table("borrow_detail")
            ->join("readers","borrow_detail.id_reader","=","readers.id")
            ->join("books","borrow_detail.id_book","=","books.id")
            ->select("borrow_detail.id","books.name as b_name","readers.name as r_name","borrow_detail.borrow_date","borrow_detail.return_date","borrow_detail.is_return","borrow_detail.is_keep","borrow_detail.expire_date","borrow_detail.created_at","borrow_detail.updated_at")->get();
        excelSpout::exportExcel(['ID','Sách','Độc giả','Ngày mượn','Ngày trả','Đã trả','CLB đang giữ sách','Ngày hết hạn','created_at','updated_at']
            ,"borrow-detail","borrow_detail",$query);
    }

    public function autoInsert($req){
        $db_is_keep = DB::table("borrow_detail")->select("is_keep")->where("id",$req->id)->get();
        $db_borrow_time = DB::table("books")->select("borrow_time")->where("id",$req->id_book)->get();
//        dd($db_borrow_time[0]->borrow_time);
        if($db_is_keep[0]->is_keep == 1 && $req->is_keep==0){
            $req->merge([
                "is_return"=>"0",
                "expire_date"=>null,
                "borrow_date"=>Carbon::now()->toDateTimeString(),
                "return_date"=>Carbon::now()->addDays($db_borrow_time[0]->borrow_time)->toDateTimeString()
            ]);

            $req->is_return = 0;
            $req->expire_date = null;
            $req->borrow_date = Carbon::now()->toDateTimeString();
            $req->return_date = Carbon::now()->addDays($db_borrow_time[0]->borrow_time)->toDateTimeString();
            return 1;
        }
        elseif ($db_is_keep[0]->is_keep==0 && $req->is_keep ==1){
            return 0;
        }
    }

    public function store(StoreRequest $request)
    {
        // your additional operations before save here
        $redirect_location = parent::storeCrud($request);
        // your additional operations after save here
        // use $this->data['entry'] or $this->crud->entry
        return $redirect_location;
    }

    public function update(UpdateRequest $request)
    {
        if($this->autoInsert($request)==0){
            return redirect("admin/borrow_detail/".$request->id."/edit")->with("logic_error","Không thể thực hiện thao tác này vì lỗi logic");
        }

//        dd($request->input());
        // your additional operations before save here
        $redirect_location = parent::updateCrud($request);
        // your additional operations after save here
        // use $this->data['entry'] or $this->crud->entry
        return $redirect_location;
    }
}
