<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Backpack\CRUD\CrudTrait;
use Illuminate\Support\Facades\Storage;
use Intervention\Image\ImageManagerStatic as Image;

class Book extends Model
{
    use CrudTrait;

     /*
    |--------------------------------------------------------------------------
    | GLOBAL VARIABLES
    |--------------------------------------------------------------------------
    */

    protected $table = 'books';
    protected $primaryKey = 'id';
     public $timestamps = true;
    const CREATED_AT = "created_at";
    const UPDATED_AT = "updated_at";
    // protected $guarded = ['id'];
     protected $fillable = ['id','name','detail','id_type','author','image','total','available','borrow_time'];
    // protected $hidden = [];
    // protected $dates = [];

    /*
    |--------------------------------------------------------------------------
    | FUNCTIONS
    |--------------------------------------------------------------------------
    */

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($obj){
            if($obj->image !=null)
                Storage::disk('public')->delete("book_image/".$obj->image);
        });
    }

     function VN_to_URLstring($string){
         $array = ["a"=>["à","á","ả","ã","ạ","ă","ằ","ắ","ẳ","ẵ","ặ","â","ầ","ấ","ẩ","ẫ","ậ","A","À","Á","Ả","Ã","Ạ","Ặ","Ằ","Ắ","Ẳ","Ẵ","Ặ","Ậ","Ầ","Ấ","Ẩ","Ẫ","Ậ"],
                   "e"=>["ê","ề","ế","ể","ễ","ệ","è","é","ẻ","ẽ","ẹ","E","Ê","Ề","Ế","Ể","Ễ","Ệ","È","É","Ẻ","Ẽ","Ẹ"],
                   "o"=>["ò","ó","ỏ","õ","ọ","ồ","ố","ổ","ỗ","ô","ộ","ơ","ờ","ớ","ở","ỡ","ợ","O","Ò","Ó","Ỏ","Õ","Ọ","Ồ","Ố","Ổ","Ỗ","Ô","Ộ","Ơ","Ờ","Ớ","Ở","Ỡ","Ợ"],
                   "u"=>["ù","ú","ủ","ũ","ụ","ư","ừ","ứ","ử","ữ","ự","U","Ù","Ú","Ủ","Ũ","Ụ","Ự","Ừ","Ứ","Ử","Ữ","Ự"],
                   "i"=>["ì","í","ỉ","ĩ","ị","Ì","Í","Ỉ","Ĩ","Ị","I"],
                   "d"=>["đ","Đ"],
                   "y"=>["ỳ","ý","ỷ","ỹ","ỵ","Ỳ","Ý","Ỷ","Ỹ","Ỵ","Y"],
         ];

         foreach ($array as $nounicode=>$unicode){
             $string = str_replace($unicode,$nounicode,$string);
         }
         $string = str_replace(" ","-",$string);
         return $string;
     }

     function htaccess_String($str){
         $str = trim($str);
         $str = str_replace("@","",$str);
         $str = str_replace("%","",$str);
         $str = str_replace("$","",$str);
         $str = str_replace("?","",$str);
         $str = str_replace("/","",$str);
         $str = str_replace("#","",$str);

         $str = $this->VN_to_URLstring($str);
         $str = strtolower($str);
         return $str;
     }

    /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */

    public function Book_type(){
        return $this->belongsTo("App\Models\Book_type","id_type","id");
    }

    public function Borrow_detail(){
        return $this->hasMany("App\Models\Borrow_detail",'id_book','id');
    }

    /*
    |--------------------------------------------------------------------------
    | SCOPES
    |--------------------------------------------------------------------------
    */

    /*
    |--------------------------------------------------------------------------
    | ACCESORS
    |--------------------------------------------------------------------------
    */

    /*
    |--------------------------------------------------------------------------
    | MUTATORS
    |--------------------------------------------------------------------------
    */
    public function setImageAttribute($value)
    {
        $attribute_name = "image";
        $disk = "public";
        $destination_path = "book_image";

        // if the image was erased
        if ($value==null) {
            // delete the image from disk
            Storage::disk($disk)->delete($this->{$attribute_name});

            // set null in the database column
            $this->attributes[$attribute_name] = null;
        }

        // if a base64 was sent, store it in the db
        if (starts_with($value, 'data:image'))
        {
            // 0. Make the image
            $image = Image::make($value);
            // 1. Generate a filename.
            $readablename = $this->htaccess_String($this->attributes["name"]);
            $filename = $readablename.'-'.time().'.jpg';
            // 2. Store the image on disk.
            Storage::disk($disk)->put($destination_path.'/'.$filename, $image->stream());
            // 3. Save the path to the database
            $this->attributes[$attribute_name] = $filename;
        }
    }
}
